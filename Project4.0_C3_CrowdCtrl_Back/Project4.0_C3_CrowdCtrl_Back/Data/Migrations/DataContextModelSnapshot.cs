// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project4._0_C3_CrowdCtrl_Back.Models;

#nullable disable

namespace Project4._0_C3_CrowdCtrl_Back.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.EventRecordingDevice", b =>
                {
                    b.Property<int>("EventRecordingDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventRecordingDeviceId"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("PlacementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordingDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("EventRecordingDeviceId");

                    b.HasIndex("EventId");

                    b.HasIndex("RecordingDeviceId");

                    b.HasIndex("ZoneId");

                    b.ToTable("EventRecordingDevice", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Threshold")
                        .HasColumnType("float");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventType", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.EventUser", b =>
                {
                    b.Property<int>("EventUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventUserId"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUser", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuardId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccurate")
                        .HasColumnType("bit");

                    b.HasKey("FeedbackId");

                    b.HasIndex("GuardId");

                    b.HasIndex("IncidentID");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("EventId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.GroupGuard", b =>
                {
                    b.Property<int>("GroupGuardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupGuardId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GuardId")
                        .HasColumnType("int");

                    b.HasKey("GroupGuardId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GuardId");

                    b.ToTable("GroupGuard", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentId"), 1L, 1);

                    b.Property<double>("Accuracy")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventRecordingDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MoodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("IncidentId");

                    b.HasIndex("EventRecordingDeviceId");

                    b.HasIndex("IncidentTypeId");

                    b.HasIndex("MoodTypeId");

                    b.ToTable("Incident", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.IncidentType", b =>
                {
                    b.Property<int>("IncidentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IncidentTypeId");

                    b.ToTable("IncidentType", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Mood", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodId"), 1L, 1);

                    b.Property<double>("Accuracy")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventRecordingDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("MoodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MoodId");

                    b.HasIndex("EventRecordingDeviceId");

                    b.HasIndex("MoodTypeId");

                    b.ToTable("Mood", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.MoodType", b =>
                {
                    b.Property<int>("MoodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MoodTypeId");

                    b.ToTable("MoodType", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.RecordingDevice", b =>
                {
                    b.Property<int>("RecordingDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordingDeviceId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordingDeviceId");

                    b.ToTable("RecordingDevice", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneId");

                    b.ToTable("Zone", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Guard", b =>
                {
                    b.HasBaseType("Project4._0_C3_CrowdCtrl_Back.Models.User");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Guard", (string)null);
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Event", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.EventRecordingDevice", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Event", "Event")
                        .WithMany("EventRecordingDevices")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.RecordingDevice", "RecordingDevice")
                        .WithMany("EventRecordingDevices")
                        .HasForeignKey("RecordingDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Zone", "Zone")
                        .WithMany("EventRecordingDevices")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("RecordingDevice");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.EventUser", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Feedback", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Guard", "Guard")
                        .WithMany()
                        .HasForeignKey("GuardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Incident", "Incident")
                        .WithMany("Feedbacks")
                        .HasForeignKey("IncidentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guard");

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Group", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Event", "Event")
                        .WithMany("Groups")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Zone", "Zone")
                        .WithMany("Groups")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.GroupGuard", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Group", "Group")
                        .WithMany("GroupGuards")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.Guard", "Guard")
                        .WithMany("GroupGuards")
                        .HasForeignKey("GuardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Guard");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Incident", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.RecordingDevice", "EventRecordingDevice")
                        .WithMany()
                        .HasForeignKey("EventRecordingDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.IncidentType", "IncidentType")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.MoodType", "MoodType")
                        .WithMany("Incidents")
                        .HasForeignKey("MoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventRecordingDevice");

                    b.Navigation("IncidentType");

                    b.Navigation("MoodType");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Mood", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.EventRecordingDevice", "EventRecordingDevice")
                        .WithMany()
                        .HasForeignKey("EventRecordingDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.MoodType", "MoodType")
                        .WithMany("Moods")
                        .HasForeignKey("MoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventRecordingDevice");

                    b.Navigation("MoodType");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Guard", b =>
                {
                    b.HasOne("Project4._0_C3_CrowdCtrl_Back.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Project4._0_C3_CrowdCtrl_Back.Models.Guard", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Event", b =>
                {
                    b.Navigation("EventRecordingDevices");

                    b.Navigation("EventUsers");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Group", b =>
                {
                    b.Navigation("GroupGuards");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Incident", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.IncidentType", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.MoodType", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("Moods");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.RecordingDevice", b =>
                {
                    b.Navigation("EventRecordingDevices");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.User", b =>
                {
                    b.Navigation("EventUsers");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Zone", b =>
                {
                    b.Navigation("EventRecordingDevices");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Project4._0_C3_CrowdCtrl_Back.Models.Guard", b =>
                {
                    b.Navigation("GroupGuards");
                });
#pragma warning restore 612, 618
        }
    }
}
